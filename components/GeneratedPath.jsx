import React, { useState } from 'react';
import ProgressTracker from './ProgressTracker';
import ExportUtils from './ExportUtils';
import StudyToolkit from './StudyToolkit';

const GeneratedPath = ({ generatedPath, skill, proficiency, learningStyle, timePerWeek, targetCompletion, difficultyLevel, learningPreference, onSave, savedPathId, userId, showProgress = false, onEncouragement }) => {
    const [showExportModal, setShowExportModal] = useState(false);
    const [showStudyToolkit, setShowStudyToolkit] = useState(false);
    const [selectedModule, setSelectedModule] = useState(null);
    const [showEmailModal, setShowEmailModal] = useState(false);
    const [emailAddress, setEmailAddress] = useState('');
    const [emailSending, setEmailSending] = useState(false);
    const [emailSent, setEmailSent] = useState(false);
    
    const handleOpenStudyToolkit = (module) => {
        setSelectedModule(module);
        setShowStudyToolkit(true);
    };
    
    const handleEmailLearningPath = async () => {
        if (!emailAddress.trim()) {
            alert('Please enter a valid email address.');
            return;
        }
        
        setEmailSending(true);
        
        try {
            // Format the learning path for email
            const emailContent = formatLearningPathForEmail();
            
            // Create mailto link with formatted content
            const subject = encodeURIComponent(`Your Personalized Learning Path: ${skill}`);
            const body = encodeURIComponent(emailContent);
            const mailtoLink = `mailto:${emailAddress}?subject=${subject}&body=${body}`;
            
            // Open default email client
            window.open(mailtoLink);
            
            setEmailSent(true);
            setTimeout(() => {
                setEmailSent(false);
                setShowEmailModal(false);
                setEmailAddress('');
            }, 2000);
            
        } catch (error) {
            console.error('Error sending email:', error);
            alert('Failed to prepare email. Please try again.');
        } finally {
            setEmailSending(false);
        }
    };
    
    const formatLearningPathForEmail = () => {
        let content = `PERSONALIZED LEARNING PATH\n`;
        content += `========================\n\n`;
        content += `Skill: ${skill}\n`;
        content += `Proficiency Level: ${proficiency}\n`;
        if (learningStyle.length > 0) {
            content += `Learning Styles: ${learningStyle.join(', ')}\n`;
        }
        content += `Time Per Week: ${timePerWeek}\n`;
        content += `Target Completion: ${targetCompletion}\n`;
        content += `Difficulty Level: ${difficultyLevel}\n`;
        content += `Learning Preference: ${learningPreference}\n\n`;
        
        content += `LEARNING MODULES\n`;
        content += `================\n\n`;
        
        generatedPath.forEach((module, index) => {
            content += `${index + 1}. ${module.moduleTitle}\n`;
            content += `   Description: ${module.description}\n`;
            if (module.estimatedHours) {
                content += `   Estimated Hours: ${module.estimatedHours}h\n`;
            }
            if (module.difficultyRating) {
                content += `   Difficulty: ${module.difficultyRating}/5\n`;
            }
            if (module.weeklySchedule) {
                content += `   Weekly Schedule: ${module.weeklySchedule}\n`;
            }
            
            content += `   Topics to Cover:\n`;
            module.subTopics.forEach(topic => {
                content += `   - ${topic}\n`;
            });
            
            if (module.resources && module.resources.length > 0) {
                content += `   Resources:\n`;
                module.resources.forEach(resource => {
                    content += `   - ${resource.title}: ${resource.url}\n`;
                });
            }
            
            if (module.practiceExercises && module.practiceExercises.length > 0) {
                content += `   Practice Exercises:\n`;
                module.practiceExercises.forEach(exercise => {
                    content += `   - ${exercise}\n`;
                });
            }
            
            content += `\n`;
        });
        
        content += `\n---\nGenerated by Personal Learning Path Generator\n`;
        content += `Created on: ${new Date().toLocaleDateString()}\n`;
        
        return content;
    };
    
    if (!generatedPath) return null;

    const pathData = {
        skill,
        proficiency,
        learningStyle,
        timePerWeek,
        targetCompletion,
        difficultyLevel,
        learningPreference
    };

    return (
        <section id="generated-path-section" className="mt-10 pt-8 border-t border-indigo-200">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-semibold text-indigo-700">Your Personalized Learning Path</h2>
                <div className="flex space-x-2">
                    <button
                        onClick={() => setShowEmailModal(true)}
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center space-x-2 text-sm font-medium"
                    >
                        <span>üìß</span>
                        <span>Email</span>
                    </button>
                    <button
                        onClick={() => setShowExportModal(true)}
                        className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center space-x-2 text-sm font-medium"
                    >
                        <span>üíæ</span>
                        <span>Export</span>
                    </button>
                </div>
            </div>
            <div className="bg-indigo-50 p-6 rounded-lg shadow-inner border border-indigo-100">
                <h3 className="text-xl font-bold text-indigo-800 mb-3">{skill} - {proficiency}</h3>
                {learningStyle.length > 0 && (
                    <p className="text-sm text-gray-600 mb-4">Preferred Styles: {learningStyle.join(', ')}</p>
                )}
                
                {/* Show progress tracker if this is a saved path */}
                {showProgress && savedPathId && userId ? (
                    <ProgressTracker 
                        pathId={savedPathId}
                        userId={userId}
                        learningPath={generatedPath}
                    />
                ) : (
                    /* Show static view for unsaved paths */
                    <ol className="list-decimal list-inside space-y-6">
                        {generatedPath.map((module, index) => (
                            <li key={index} className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                                <div className="flex justify-between items-start mb-3">
                                    <h4 className="text-lg font-semibold text-gray-900">{module.moduleTitle}</h4>
                                    <div className="flex items-center space-x-2">
                                        {module.estimatedHours && (
                                            <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2 py-1 rounded-full">
                                                ‚è±Ô∏è {module.estimatedHours}h
                                            </span>
                                        )}
                                        {module.difficultyRating && (
                                            <span className="bg-yellow-100 text-yellow-800 text-xs font-medium px-2 py-1 rounded-full">
                                                üéöÔ∏è {module.difficultyRating}/5
                                            </span>
                                        )}
                                        <button
                                            onClick={() => handleOpenStudyToolkit(module)}
                                            className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white px-3 py-1 rounded-lg text-xs font-medium hover:from-purple-600 hover:to-indigo-700 transition-all duration-200 flex items-center space-x-1"
                                        >
                                            <span>üìö</span>
                                            <span>Study Tools</span>
                                        </button>
                                    </div>
                                </div>
                                
                                <p className="text-gray-700 text-sm mb-3">{module.description}</p>
                                
                                {/* Weekly Schedule */}
                                {module.weeklySchedule && (
                                    <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-3">
                                        <h5 className="text-sm font-medium text-green-800 mb-1">üìÖ Weekly Schedule</h5>
                                        <p className="text-sm text-green-700">{module.weeklySchedule}</p>
                                    </div>
                                )}
                                
                                {/* Sub Topics */}
                                <div className="mb-3">
                                    <h5 className="text-sm font-medium text-gray-800 mb-2">üìö Topics to Cover:</h5>
                                    <ul className="list-disc list-inside text-sm text-gray-600 ml-4 space-y-1">
                                        {module.subTopics.map((topic, subIndex) => (
                                            <li key={subIndex}>{topic}</li>
                                        ))}
                                    </ul>
                                </div>
                                
                                {/* Recommended Books */}
                                {module.recommendedBooks && module.recommendedBooks.length > 0 && (
                                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3">
                                        <h5 className="text-sm font-medium text-blue-800 mb-2">üìö Recommended Books:</h5>
                                        <ul className="text-sm text-blue-700 space-y-1">
                                            {module.recommendedBooks.map((book, bookIndex) => (
                                                <li key={bookIndex} className="flex items-start">
                                                    <span className="text-blue-500 mr-2">‚Ä¢</span>
                                                    <a 
                                                        href={`https://www.google.com/search?q=${encodeURIComponent(book.title + ' ' + book.author + ' book')}`}
                                                        target="_blank"
                                                        rel="noopener noreferrer"
                                                        className="text-blue-700 hover:text-blue-900 hover:underline transition-colors"
                                                    >
                                                        <strong>{book.title}</strong> by {book.author}
                                                    </a>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                )}
                                
                                {/* Recommended Courses */}
                                {module.recommendedCourses && module.recommendedCourses.length > 0 && (
                                    <div className="bg-orange-50 border border-orange-200 rounded-lg p-3 mb-3">
                                        <h5 className="text-sm font-medium text-orange-800 mb-2">üéì Recommended Courses:</h5>
                                        <ul className="text-sm text-orange-700 space-y-1">
                                            {module.recommendedCourses.map((course, courseIndex) => {
                                                const getPlatformUrl = (platform, title) => {
                                                    const searchQuery = encodeURIComponent(title);
                                                    switch(platform.toLowerCase()) {
                                                        case 'coursera':
                                                            return `https://www.coursera.org/search?query=${searchQuery}`;
                                                        case 'udemy':
                                                            return `https://www.udemy.com/courses/search/?q=${searchQuery}`;
                                                        case 'edx':
                                                            return `https://www.edx.org/search?q=${searchQuery}`;
                                                        case 'khan academy':
                                                            return `https://www.khanacademy.org/search?page_search_query=${searchQuery}`;
                                                        case 'codecademy':
                                                            return `https://www.codecademy.com/search?query=${searchQuery}`;
                                                        default:
                                                            return `https://www.google.com/search?q=${encodeURIComponent(title + ' ' + platform + ' course')}`;
                                                    }
                                                };
                                                
                                                return (
                                                    <li key={courseIndex} className="flex items-start">
                                                        <span className="text-orange-500 mr-2">‚Ä¢</span>
                                                        <a 
                                                            href={getPlatformUrl(course.platform, course.title)}
                                                            target="_blank"
                                                            rel="noopener noreferrer"
                                                            className="text-orange-700 hover:text-orange-900 hover:underline transition-colors"
                                                        >
                                                            <strong>{course.title}</strong> on {course.platform}
                                                        </a>
                                                    </li>
                                                );
                                            })}
                                        </ul>
                                    </div>
                                )}
                                
                                {/* YouTube Video Recommendations */}
                                 {module.recommendedYouTubeVideos && module.recommendedYouTubeVideos.length > 0 && (
                                     <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-3">
                                         <h5 className="text-sm font-medium text-red-800 mb-2">üì∫ Recommended YouTube Videos:</h5>
                                         <ul className="text-sm text-red-700 space-y-1">
                                             {module.recommendedYouTubeVideos.map((video, videoIndex) => (
                                                 <li key={videoIndex} className="flex items-start">
                                                     <span className="text-red-500 mr-2">‚Ä¢</span>
                                                     <div>
                                                         <a 
                                                             href={`https://www.youtube.com/results?search_query=${encodeURIComponent(video.title + ' ' + video.channel)}`}
                                                             target="_blank"
                                                             rel="noopener noreferrer"
                                                             className="text-red-700 hover:text-red-900 hover:underline transition-colors"
                                                         >
                                                             <strong>{video.title}</strong> by {video.channel}
                                                         </a>
                                                         {video.description && (
                                                             <div className="text-xs text-red-600 mt-1">{video.description}</div>
                                                         )}
                                                     </div>
                                                 </li>
                                             ))}
                                         </ul>
                                     </div>
                                 )}
                                
                                {/* Learning Tips */}
                                {module.learningTips && module.learningTips.length > 0 && (
                                    <div className="bg-purple-50 border border-purple-200 rounded-lg p-3 mb-3">
                                        <h5 className="text-sm font-medium text-purple-800 mb-2">üí° Learning Tips:</h5>
                                        <ul className="text-sm text-purple-700 space-y-1">
                                            {module.learningTips.map((tip, tipIndex) => (
                                                <li key={tipIndex} className="flex items-start">
                                                    <span className="text-purple-500 mr-2">‚Ä¢</span>
                                                    {tip}
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                )}
                                
                                {/* Resource Type */}
                                <div className="flex items-center justify-between">
                                    <p className="text-xs text-indigo-500 font-medium">
                                        üéØ Suggested Resource: {module.suggestedResourceType}
                                    </p>
                                </div>
                            </li>
                        ))}
                    </ol>
                )}
                
                {/* Save button only for unsaved paths */}
                {!showProgress && (
                    <button
                        onClick={onSave}
                        className="mt-6 w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        Save This Path
                    </button>
                )}
            </div>
            
            {/* Export Modal */}
            {showExportModal && (
                <ExportUtils
                    learningPath={generatedPath}
                    pathData={pathData}
                    onClose={() => setShowExportModal(false)}
                />
            )}
            
            {/* Email Modal */}
            {showEmailModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-96 max-w-md mx-4">
                        <div className="flex justify-between items-center mb-4">
                            <h3 className="text-lg font-semibold text-gray-900">Email Learning Path</h3>
                            <button
                                onClick={() => {
                                    setShowEmailModal(false);
                                    setEmailAddress('');
                                    setEmailSent(false);
                                }}
                                className="text-gray-400 hover:text-gray-600"
                            >
                                ‚úï
                            </button>
                        </div>
                        
                        {emailSent ? (
                            <div className="text-center py-4">
                                <div className="text-green-600 text-4xl mb-2">‚úÖ</div>
                                <p className="text-green-600 font-medium">Email prepared successfully!</p>
                                <p className="text-sm text-gray-600 mt-1">Your email client should open shortly.</p>
                            </div>
                        ) : (
                            <>
                                <div className="mb-4">
                                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                                        Email Address
                                    </label>
                                    <input
                                        type="email"
                                        id="email"
                                        value={emailAddress}
                                        onChange={(e) => setEmailAddress(e.target.value)}
                                        placeholder="Enter your email address"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                        disabled={emailSending}
                                    />
                                </div>
                                
                                <div className="bg-blue-50 border border-blue-200 rounded-md p-3 mb-4">
                                    <p className="text-sm text-blue-800">
                                        üìß This will open your default email client with a pre-formatted message containing your complete learning path.
                                    </p>
                                </div>
                                
                                <div className="flex space-x-3">
                                    <button
                                        onClick={() => {
                                            setShowEmailModal(false);
                                            setEmailAddress('');
                                        }}
                                        className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
                                        disabled={emailSending}
                                    >
                                        Cancel
                                    </button>
                                    <button
                                        onClick={handleEmailLearningPath}
                                        disabled={emailSending || !emailAddress.trim()}
                                        className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center justify-center space-x-2"
                                    >
                                        {emailSending ? (
                                            <>
                                                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                                <span>Preparing...</span>
                                            </>
                                        ) : (
                                            <>
                                                <span>üìß</span>
                                                <span>Send Email</span>
                                            </>
                                        )}
                                    </button>
                                </div>
                            </>
                        )}
                    </div>
                </div>
            )}
            
            {/* Study Toolkit Modal */}
             {showStudyToolkit && selectedModule && (
                 <StudyToolkit
                     isOpen={showStudyToolkit}
                     module={selectedModule}
                     userId={userId}
                     onClose={() => setShowStudyToolkit(false)}
                     onEncouragement={onEncouragement}
                 />
             )}
        </section>
    );
};

export default GeneratedPath;